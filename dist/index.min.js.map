{"version":3,"sources":["Point.ts","Direction.ts","LineSegment.ts","Vector.ts","Entry.ts"],"names":[],"mappings":"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","file":"index.min.js","sourceRoot":"../src/main","sourcesContent":["\n\nexport default class Point {\n  private x: number;\n  private y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  // point functioning as a cartesian vector...\n  public add(other_point: Point): Point {\n    return new Point(this.x + other_point.getX(), this.y + other_point.getY());\n  }\n\n\n  public clone(): Point {\n    return new Point(this.x, this.y);\n  }\n\n\n  public equals(other_point: Point): boolean {\n    return (other_point.getX() === this.x) && (other_point.getY() === this.y);\n  }\n\n\n  public getX(): number {\n    return this.x;\n  }\n\n\n  public getY(): number {\n    return this.y;\n  }\n\n\n  // point functioning as a cartesian vector...\n  public subtract(other_point: Point): Point {\n    return new Point(this.x - other_point.getX(), this.y - other_point.getY());\n  }\n\n\n  public toString(): string {\n    return `[${this.x}, ${this.y}]`;\n  }\n\n}\n","\nimport Point from \"./Point\";\n\n\nexport default class Direction {\n  private id: string;\n  private ang: number;\n  private drow: number;\n  private dcol: number;\n  private dunit: Point;\n  private dz: number;\n  private static directions: { [index: string]: Direction, } = {};\n  private static ordered: Array<Direction> = [];\n\n  constructor(id: string, ang: number, drow: number, dcol: number, dz?: number) {\n    this.id = id;\n    this.ang = ang;\n    this.drow = drow;\n    this.dcol = dcol;\n    this.dunit = new Point(dcol, drow);\n    this.dz = dz;\n    Direction.directions[id] = this;\n    Direction.ordered.push(this);\n  }\n\n\n  public static getAll(): Array<Direction> {\n    return Direction.ordered;\n  }\n\n\n  public getAngle(): number {\n    return this.ang;\n  }\n\n\n  public getAngleCos(): number {\n    return Math.cos(this.ang * Math.PI / 180);\n  }\n\n\n  public getAngleSin(): number {\n    return Math.sin(this.ang * Math.PI / 180);\n  }\n\n\n  public static get(id: string): Direction {\n    return Direction.directions[id];\n  }\n\n\n  public getAnchorPointFractionX(): number {\n    if (this.id === \"U\") {\n      return 0.1;\n    }\n    if (this.id === \"D\") {\n      return -0.1;\n    }\n    return this.getDeltaCol() / 2;\n  }\n\n\n  public getAnchorPointFractionY(): number {\n    if (this.id === \"U\") {\n      return -0.5;\n    }\n    if (this.id === \"D\") {\n      return 0.5;\n    }\n    return this.getDeltaRow() / 2;\n  }\n\n\n  public getDeltaCol(): number {\n    return this.dcol;\n  }\n\n\n  public getDeltaRow(): number {\n    return this.drow;\n  }\n\n\n  public getDeltaUnit(): Point {\n    return this.dunit;\n  }\n\n\n  public getDeltaZ(): number {\n    return this.dz;\n  }\n\n\n  public getId(): string {\n    return this.id;\n  }\n\n\n  public static nearest(bearing: number): Direction {\n    const index: number = Math.floor((bearing + 22.5) / 45) % 8;\n    const dir: Direction = Direction.ordered[index];\n    // console.log(`nearest(${bearing}) => ${index} => ${dir}`);\n    return dir;\n  }\n\n\n  public toString(): string {\n    return this.id;\n  }\n\n};\n\n\n\nnew Direction(\"N\" ,   0, -1,  0,  0);\nnew Direction(\"NE\",  45, -1,  1,  0);\nnew Direction(\"E\" ,  90,  0,  1,  0);\nnew Direction(\"SE\", 135,  1,  1,  0);\nnew Direction(\"S\" , 180,  1,  0,  0);\nnew Direction(\"SW\", 225,  1, -1,  0);\nnew Direction(\"W\" , 270,  0, -1,  0);\nnew Direction(\"NW\", 315, -1, -1,  0);\nnew Direction(\"U\" ,  45,  0,  0,  1);\nnew Direction(\"D\" , 225,  0,  0, -1);\n\n","\nimport Point from \"./Point\";\n\n\nexport default class LineSegment {\n  private from: Point;\n  private to  : Point;\n\n\n  constructor(from: Point, to: Point) {\n    this.from = from;\n    this.to   = to;\n  }\n\n\n  public clone(): LineSegment {\n    return new LineSegment(this.from, this.to);\n  }\n\n\n  public equals(other_line: LineSegment): boolean {\n    return (other_line.getFrom().equals(this.from)) && (other_line.getTo().equals(this.to));\n  }\n\n\n  public getFrom(): Point {\n    return this.from;\n  }\n\n\n  public getTo(): Point {\n    return this.to;\n  }\n\n\n  public setFrom(point: Point): void {\n    this.from = point;\n  }\n\n\n  public setTo(point: Point): void {\n    this.to   = point;\n  }\n\n\n  public toString(): string {\n    return `${this.from} - ${this.to}`;\n  }\n}\n","\nimport Point from \"./Point\";\n\n\nexport default class Vector {\n  private magnitude: number;\n  private bearing: number; // 0 = North\n\n  constructor(magnitude: number, bearing: number) {\n    this.magnitude = magnitude;\n    this.bearing = bearing;\n  }\n\n\n  public add(other_vector: Vector): Vector {\n    const ap: Point = this.toPoint();\n    const bp: Point = other_vector.toPoint();\n    return Vector.fromOriginTo(ap.add(bp));\n  }\n\n\n  public static between(a: Point, b: Point): Vector {\n    const new_b: Point = b.clone();\n    return Vector.fromOriginTo(new_b.subtract(a));\n  }\n\n\n  public clone(): Vector {\n    return new Vector(this.magnitude, this.bearing);\n  }\n\n\n  public equals(other_vector: Vector): boolean {\n    return (other_vector.getMagnitude() === this.magnitude)\n        && (other_vector.getBearing() === this.bearing);\n  }\n\n\n  public static fromOriginTo(point: Point): Vector {\n    const x = point.getX();\n    const y = point.getY();\n    let bearing = Math.atan2(x, -y) * 180 / Math.PI;\n    if (bearing < 0) {\n      bearing += 360;\n    }\n    const magnitude = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));\n    return new Vector(magnitude, bearing);\n  }\n\n\n  public getBearing(): number {\n    return this.bearing;\n  }\n\n\n  public getMagnitude(): number {\n    return this.magnitude;\n  }\n\n\n  public subtract(other_vector: Vector): Vector {\n    const ap: Point = this.toPoint();\n    const bp: Point = other_vector.toPoint();\n    return Vector.fromOriginTo(ap.subtract(bp));\n  }\n\n\n  public toPoint(): Point {\n    let x: number =  (this.magnitude * Math.sin(this.bearing * Math.PI / 180));\n    let y: number = -(this.magnitude * Math.cos(this.bearing * Math.PI / 180));\n    return new Point(x, y);\n  }\n\n\n  public toString(): string {\n    return `[${this.magnitude.toFixed(3)}, ${this.bearing.toFixed(3)}°]`;\n  }\n\n}\n","\nexport { default as Direction } from \"./Direction\";\nexport { default as LineSegment } from \"./LineSegment\";\nexport { default as Point } from \"./Point\";\nexport { default as Vector } from \"./Vector\";\n"]}